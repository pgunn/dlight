#!/usr/bin/env python

import argparse
import code # for code.interact(local=dict(globals(), **locals()) ) debugging
from collections import defaultdict
import json
import os
import pprint
import re
from typing import Dict, List, Tuple # for mypy

######################
# progress
#
# Look at the texture pack as a whole and analyse its completeness as well as
# help hint as to what to do next
#
# I recommend you download the nvidia art pack and unpack it as nvidia_pbr_example inside
# your repo. If you unpack it somewhere else you will need to say where using the
# --reference_list parameter. This file is needed to get a list of all textures.


tfold_sides = ['top', 'side', 'front', 'bottom', 'back', 'inner', 'lower', 'inside', 'outside', 'outer', 'horizontal', 'vertical']
tfold_states = ['off', 'on', 'stage', '0', '1', '2', '3', '4', '5', '6', '7', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'powered', 'connected', 'disconnected', 'opaque', 'closed', 'open', 'dry', 'wet', 'still', 'flow', 'ready']
tfold_colours = ['black', 'blue', 'brown', 'cracked', 'cyan', 'gilded', 'gray', 'green', 'light', 'blue', 'lime', 'magenta', 'orange', 'pink', 'polished', 'purple', 'red', 'silver', 'white', 'yellow', 'stained', 'grey']
tfold_misc = ['carried']

def main():
	cfg = handle_args()
	manifest_file     = os.path.join(cfg.projdir, 'manifest.json')

	manifest	= jload(manifest_file)
	texture_list	= os.listdir(f"{cfg.projdir}/textures/blocks") # build from f{projdir}/textures/blocks/*
	texture_ref	= os.listdir(f"{cfg.reference}/textures/blocks") # build from f{reference}/textures/blocks/*

	# For now we're going to focus on block textures

	for texture_we_have in texture_list:
		if texture_we_have not in texture_ref:
			print(f"Warning: Extraneous texture {texture_we_have}")
	print(f"Textures: {len(texture_list)} present of {len(texture_ref)} possible")
	reducers = [*tfold_sides, *tfold_states, *tfold_colours, *tfold_misc]
	#print(f"Reducers: {reducers}")

	report = defaultdict(list)
	todo = set(texture_ref) - set(texture_list)
	if not cfg.summary:
		print(f"Parsing: {len(todo)} entries")

		for missing in todo:
			miss = missing.split('/')[-1]
			#print(f"Parse {miss}")
			if '_' not in miss:
				report[miss] = [miss]
				continue
			miss_l = miss.split('_')
			parent = '_'.join(filter(lambda x: x not in reducers, miss_l))
			if parent == '': # Every single element is in tfold
				raise Exception(f"Uh oh: {miss} ({missing})")
			report[parent].append(miss)
		if cfg.verbose:
			pprint.pprint(dict(report))
		else:
			print("\n".join(map(lambda x: f"\t{x}", sorted(report.keys()))))

def handle_args():
	parser = argparse.ArgumentParser(description="Check Block Textures")
	parser.add_argument("projdir",	help="Project Dir")
	parser.add_argument("--reference",	default="vanilla-1.16.200", help="Reference (vanilla) texture pack")
	parser.add_argument("--summary",	action="store_true", help="Only summarise")
	parser.add_argument("--verbose",	action="store_true", help="Be noisier")
	ret = parser.parse_args()
	return ret

#####

def jload(fn:str):
	with open(fn, 'r') as fh:
		ret = json.load(fh)
	return ret

#####
main()
