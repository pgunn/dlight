#!/usr/bin/env python

import argparse
import code # for code.interact(local=dict(globals(), **locals()) ) debugging
import json
import os
import re
import uuid
from typing import Dict, List, Tuple # for mypy

######################
# newversion
#
# Bump Minecraft extension versions/UUIDs
# Eventually: Do any sanity checks we decide are reasonable
# Maybe: Do any static computations that need doing

def main():
	cfg = handle_args()
	manifest_fn = os.path.join(cfg.projdir, "manifest.json")
	with open(manifest_fn, 'r') as man_r:
		manifest = json.load(man_r)
	manifest['header']['uuid'] = str(uuid.uuid4() )
	manifest['modules'][0]['uuid'] = str(uuid.uuid4() )
	if cfg.force_version:
		raise Exception("Forcing version is not yet supported")
	manifest['header']['version'][2] += 1
	manifest['modules'][0]['version'][2] += 1
	if "version:" in manifest['header']['description']:
		manifest['header']['description'] = re.sub(r' version:.*', ' version:' + format_version_tuple(manifest['header']['version']), manifest['header']['description'])
	else:
		manifest['header']['description'] += " version:" + format_version_tuple(manifest['header']['version'])

	# Add any other kinds of logic on the manifest here
	if cfg.test:
		print("Would rewrite manifest, contents would be:")
		print("==========================================")
		print(lines)
		print("==========================================")
	else:
		with open(manifest_fn, 'w') as man_rw:
			json.dump(manifest, man_rw)
	# Add any other other kinds of logic on the entire project dir here

def handle_args():
	parser = argparse.ArgumentParser(description="This bumps Minecraft extension versions and UUIDs")
	parser.add_argument("projdir",	help="Project Dir")
	parser.add_argument("--force_version", help="Force-set version to an X.Y.Z")
	parser.add_argument("--test", action="store_true", help="Test run only")
	ret = parser.parse_args()
	return ret

#########

def format_version_tuple(intuple):
	tuple_str = map(lambda x: str(x), intuple)
	return '.'.join(tuple_str)

#####
main()
