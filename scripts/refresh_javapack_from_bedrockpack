#!/usr/bin/env python

import argparse
import code # for code.interact(local=dict(globals(), **locals()) ) debugging
import glob
import json
import os
import re
import shutil
import tempfile
from typing import Dict, List, Tuple # for mypy

# Data generated with summarise_mcmetas on a sample mcjava texture pack
animdata = 	{
		"blast_furnace_front_on": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"campfire_fire": '{ "animation": { "frametime": 2 }}',
		"campfire_log_lit": '{ "animation": { "interpolate": true, "frametime": 20 }}',
		"chain_command_block_back": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"chain_command_block_conditional": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"chain_command_block_front": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"chain_command_block_side": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"command_block_back": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"command_block_conditional": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"command_block_front": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"command_block_side": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"crimson_stem": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"fire_0": '{ "animation": { "frames": [ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ] }}',
		"fire_1": '{ "animation": {}}',
		"kelp": '{ "animation": { "frametime": 2 }}',
		"kelp_plant": '{ "animation": { "frametime": 2 }}',
		"lantern": '{ "animation": { "frametime": 8 }}',
		"lava_flow": '{ "animation": { "frametime": 3 }}',
		"lava_still": '{ "animation": { "frametime": 2, "frames": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ] }}',
		"magma": '{ "animation": { "frametime": 8, "interpolate": true, "frames": [ 0, 1, 2 ] }}',
		"nether_portal": '{ "animation": {}}',
		"prismarine": '{ "animation": { "frametime": 300, "interpolate": true, "frames": [ 0, 1, 0, 2, 0, 3, 0, 1, 2, 1, 3, 1, 0, 2, 1, 2, 3, 2, 0, 3, 1, 3 ] }}',
		"repeating_command_block_back": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"repeating_command_block_conditional": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"repeating_command_block_front": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"repeating_command_block_side": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"respawn_anchor_top": '{ "animation": {}}',
		"sea_lantern": '{ "animation": { "frametime": 5 }}',
		"seagrass": '{ "animation": { "frametime": 2 }}',
		"smoker_front_on": '{ "animation": { "interpolate": false, "frametime": 4 }}',
		"soul_campfire_fire": '{ "animation": { "frametime": 2 }}',
		"soul_campfire_log_lit": '{ "animation": { "interpolate": true, "frametime": 20 }}',
		"soul_fire_0": '{ "animation": { "frames": [ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ] }}',
		"soul_fire_1": '{ "animation": {}}',
		"soul_lantern": '{ "animation": { "frametime": 8 }}',
		"stonecutter_saw": '{ "animation": { "interpolate": false, "frametime": 1 }}',
		"tall_seagrass_bottom": '{ "animation": { "frametime": 2 }}',
		"tall_seagrass_top": '{ "animation": { "frametime": 2 }}',
		"warped_stem": '{ "animation": { "interpolate": true, "frametime": 10 }}',
		"water_flow": '{ "animation": {}}',
		"water_still": '{ "animation": { "frametime": 2 }}'
		}

######################
# refresh_javapack_from_bedrockpack
#
# Makes installable java packs from our normal Bedrock process

def main():
	cfg = handle_args()
	orig_metadata = jload(os.path.join(cfg.src, 'manifest.json'))

	with tempfile.TemporaryDirectory() as td:
		# In this context manager, we made a directory into which we'll place everything before we zip it
		shutil.copy(src=os.path.join(cfg.src, 'pack_icon.png'), dst=(os.path.join(td, 'pack.png')))
		with open(os.path.join(td, 'pack.mcmeta'), 'w') as mcmf:
			data =	{
				"pack": {
					"pack_format": cfg.pack_ver,
					"description": orig_metadata['header']['description']
					}
				}
			json.dump(data, mcmf)
		os.makedirs(os.path.join(td, 'assets', 'minecraft', 'textures', 'block'))
		os.makedirs(os.path.join(td, 'assets', 'minecraft', 'textures', 'item'))
		for btfile in sorted(os.listdir(os.path.join(cfg.src, 'textures', 'blocks'))):
			if '_mer' in btfile:
				continue
			if 'texture_set' in btfile:
				continue
			if not os.path.isfile(os.path.join(cfg.src, 'textures', 'blocks', btfile)):
				continue # Embedded dir?
			print(f"Processing block texture {btfile}")
			targfn = btfile

			if 'itemframe_background' in btfile:
				targfn = re.sub('itemframe_background', 'item_frame', btfile)
			elif btfile.startswith('log_'):
				targfn = re.sub('log_(.*)\.', '\\1_log.', btfile)
			elif btfile.startswith('door_'): # Bedrock's terminology for doors: door_WOOD_upperlower
				targfn = re.sub('_upper', '_door_top', btfile)
				targfn = re.sub('_lower', '_door_bottom', targfn)
				targfn = re.sub('^door_', '', targfn)
				# Oddly, doors are already dark_oak rather than big_oak, so that substitution doesn't need to happen
			elif btfile.startswith('dirt_podzol'):
				targfn = re.sub('dirt_podzol', 'podzol', btfile)
			elif btfile.startswith('quartz_ore'):
				targfn = re.sub('quartz_ore', 'nether_quartz_ore', btfile)
			elif 'ice_packed' in btfile:
				targfn = re.sub('ice_packed', 'packed_ice', btfile)
			elif btfile.startswith('wool_colored_'):
				targfn = re.sub('wool_colored_(.*).png', '\\1_wool.png', btfile)
			elif btfile.startswith('glazed_terracotta_'):
				targfn = re.sub('glazed_terracotta_(.*)\.', '\\1_glazed_terracotta.', btfile)
			elif 'rail_normal_turned' in btfile:
				targfn = re.sub('rail_normal_turned', 'rail_corner', btfile)
			elif btfile.startswith('rail_'):
				targfn = re.sub('rail_(.*)\.', '\\1_rail.', btfile)
				targfn = re.sub('_powered_rail', '_rail_on', targfn) # refine
			elif btfile.startswith('glass_'):
				targfn = re.sub('glass_(.*)\.', '\\1_glass.', btfile)
			elif btfile in ['stone_andesite.png', 'stone_diorite.png', 'stone_granite.png']:
				targfn = re.sub('stone_', '', btfile)
			elif btfile.startswith('slime.'):
				targfn = re.sub('slime\.', 'slime_block.', btfile)
			elif btfile.startswith('portal.'):
				targfn = re.sub('portal\.', 'nether_portal.', btfile)
			elif btfile.startswith('torch_on.'):
				targfn = re.sub('torch_on\.', 'torch.', btfile)
			elif btfile.startswith('farmland_wet.'):
				targfn = re.sub('farmland_wet', 'farmland_moist', btfile)
			elif btfile.startswith('farmland_dry.'):
				targfn = re.sub('farmland_dry', 'farmland', btfile)
			elif btfile.startswith('web.'):
				targfn = re.sub('web\.', 'cobweb.', btfile)
			elif '_smooth.' in btfile: # polished/smooth bricks
				targfn = re.sub('stone_(.*)_smooth', 'polished_\\1', btfile)
			elif 'grass_' in btfile:
				targfn = re.sub('grass_', 'grass_block_', btfile)

			# Section 2 - these all modify targfn in-place
			if 'big_oak' in targfn:
				targfn = re.sub('big_oak', 'dark_oak', targfn)

			# Handle animation data in .mcmeta files. These have static content, defined above.
			texture_no_extension, _ = btfile.split('.', 1)
			if texture_no_extension in animdata:
				with open(os.path.join(td, 'assets', 'minecraft', 'textures', 'block', targfn + ".mcmeta"), 'w') as mcfh:
					mcfh.write(animdata[texture_no_extension])
			# TODO: chiseled sand
			shutil.copy(src=os.path.join(cfg.src, 'textures', 'blocks', btfile), dst=os.path.join(td, 'assets', 'minecraft', 'textures', 'block', targfn))
		# Now, for item textures!
		for itfile in sorted(os.listdir(os.path.join(cfg.src, 'textures', 'items'))):
			if not os.path.isfile(os.path.join(cfg.src, 'textures', 'items', itfile)):
				continue # Embedded dir?
			print(f"Processing item texture {itfile}")
			targfn = itfile
			if itfile.startswith('bow_standby'):
				targfn = re.sub('bow_standby', 'bow', itfile)
			elif 'wood_' in itfile:
				targfn = re.sub('wood_', 'wooden_', itfile)
			shutil.copy(src=os.path.join(cfg.src, 'textures', 'items', itfile), dst=os.path.join(td, 'assets', 'minecraft', 'textures', 'item', targfn))


		shutil.make_archive(f"{orig_metadata['header']['name']}-{orig_metadata['header']['version'][0]}.{orig_metadata['header']['version'][1]}.{orig_metadata['header']['version'][2]}", 'zip', td)


def handle_args():
	parser = argparse.ArgumentParser(description="Convert bedrock mcpack to java")
	parser.add_argument("--src",	default='dlight', type=str,	help="source dir for bedrock pack")
	parser.add_argument("--pack_ver",	default=6, type=int,	help="Pack version")
	ret = parser.parse_args()
	return ret

#####

def jload(fn:str):
	with open(fn, 'r') as fh:
		ret = json.load(fh)
	return ret


#####
main()
